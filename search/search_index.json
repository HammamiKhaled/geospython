{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geospython","text":"<p>A python package for geospatial analysis and mapping</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://khaledhammami.me/geospython</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Interactive mapping</li> <li>Processing geospatial data</li> </ul>"},{"location":"#usage","title":"Usage","text":"<pre><code>import geospython\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#geospython.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>geospython/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/HammamiKhaled/geospython/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>geospython could always use more documentation, whether as part of the official geospython docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/HammamiKhaled/geospython/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geospython for local development.</p> <ol> <li> <p>Fork the geospython repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geospython.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geospython\n$ cd geospython/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geospython tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/HammamiKhaled/geospython/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":"<p>A class for creating interactive maps with Folium. This module provides a Map class that extends folium.Map and includes methods to add basemaps, GeoJSON data, vector data, and layer controls.</p>"},{"location":"foliumap/#geospython.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>geospython/foliumap.py</code> <pre><code>class Map(folium.Map):\n    def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n        \"\"\"Initialize the map.\n\n        Args:\n            center (list, optional): The initial center of the map. Defaults to [20, 0].\n            zoom (int, optional): The initial zoom level of the map. Defaults to 2.\n            height (str, optional): The height of the map. Defaults to \"600px\".\n        \"\"\"\n\n        super().__init__(location=center, zoom_start=zoom, height=height, **kwargs)\n\n    def add_basemap(self, basemap=\"OpenStreetMap\"):\n        \"\"\"Add a basemap to the map.\n\n        Args:\n            basemap (str): The name of the basemap to add.\n        \"\"\"\n\n        import xyzservices.providers as xyz\n\n        providers = xyz.flatten()\n\n        basemaps = {\n            \"OpenStreetMap\": folium.TileLayer(\"openstreetmap\"),\n            \"CartoDB positron\": folium.TileLayer(\"cartodb positron\"),\n            \"CartoDB dark_matter\": folium.TileLayer(\"cartodb dark_matter\"),\n            \"Esri WorldImagery\": folium.TileLayer(\"esri worldimagery\"),\n            \"OpenTopoMap\": folium.TileLayer(\n                tiles=providers[\"OpenTopoMap\"].build_url(),\n                attr=providers[\"OpenTopoMap\"].attribution,\n                name=providers[\"OpenTopoMap\"].name,\n            ),\n            \"OSM HOT\": folium.TileLayer(\n                tiles=providers[\"OpenStreetMap.HOT\"].build_url(),\n                attr=providers[\"OpenStreetMap.HOT\"].attribution,\n                name=providers[\"OpenStreetMap.HOT\"].name,\n            ),\n            \"Satellite\": folium.TileLayer(\n                tiles=providers[\"Gaode.Satellite\"].build_url(),\n                attr=providers[\"Gaode.Satellite\"].attribution,\n                name=providers[\"Gaode.Satellite\"].name,\n            ),\n            \"Esri WorldStreetMap\": folium.TileLayer(\n                tiles=providers[\"Esri.WorldStreetMap\"].build_url(),\n                attr=providers[\"Esri.WorldStreetMap\"].attribution,\n                name=providers[\"Esri.WorldStreetMap\"].name,\n            ),\n            \"Esri NatGeo\": folium.TileLayer(\n                tiles=providers[\"Esri.NatGeoWorldMap\"].build_url(),\n                attr=providers[\"Esri.NatGeoWorldMap\"].attribution,\n                name=providers[\"Esri.NatGeoWorldMap\"].name,\n            ),\n            \"World At Night\": folium.TileLayer(\n                tiles=providers[\"NASAGIBS.ViirsEarthAtNight2012\"].build_url(),\n                attr=providers[\"NASAGIBS.ViirsEarthAtNight2012\"].attribution,\n                name=providers[\"NASAGIBS.ViirsEarthAtNight2012\"].name,\n            ),\n            \"Strava\": folium.TileLayer(\n                tiles=providers[\"Strava.All\"].build_url(),\n                attr=providers[\"Strava.All\"].attribution,\n                name=providers[\"Strava.All\"].name,\n            ),\n        }\n\n        if basemap in basemaps:\n            basemaps[basemap].add_to(self)\n        else:\n            basemaps[\"OpenStreetMap\"].add_to(self)\n\n    def add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs):\n        \"\"\"Add GeoJSON data to the map.\n\n        Args:\n            data (str, dict): The GeoJSON data to add.\n            zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n            hover_style (dict, optional): The style to apply on hover. Defaults to None.\n        \"\"\"\n\n        import geopandas as gpd\n\n        if isinstance(data, str):\n\n            gdf = gpd.read_file(data)\n            geojson_data = gdf.__geo_interface__\n\n        elif isinstance(data, dict):\n\n            geojson_data = data\n            gdf = gpd.GeoDataFrame.from_features(geojson_data[\"features\"])\n\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.5}\n\n        folium.GeoJson(geojson_data, **kwargs).add_to(self)\n\n        # if zoom_to_layer:\n        #     bounds = gdf.total_bounds\n        #     self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"Add vector data to the map.\n\n        Args:\n            data (str, dict): The vector data to add.\n\n        Raises:\n            ValueError: If the data is not a valid format.\n        \"\"\"\n\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            layer = gpd.read_file(data)\n            geojson_data = layer.__geo_interface__\n\n            self.add_geojson(geojson_data, **kwargs)\n\n        elif isinstance(data, gpd.GeoDataFrame):\n            geojson_data = data.__geo_interface__\n\n            self.add_geojson(geojson_data, **kwargs)\n        elif isinstance(data, dict):\n            geojson_data = data\n            self.add_geojson(geojson_data, **kwargs)\n        else:\n            raise ValueError(\n                \"Data must be a file path, GeoDataFrame, or GeoJSON dictionary.\"\n            )\n\n    def add_layer_control(self):\n        \"\"\"Add a layer control to the map.\"\"\"\n\n        folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"foliumap/#geospython.foliumap.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, height='600px', **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>The initial center of the map. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>The initial zoom level of the map. Defaults to 2.</p> <code>2</code> <code>height</code> <code>str</code> <p>The height of the map. Defaults to \"600px\".</p> <code>'600px'</code> Source code in <code>geospython/foliumap.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n    \"\"\"Initialize the map.\n\n    Args:\n        center (list, optional): The initial center of the map. Defaults to [20, 0].\n        zoom (int, optional): The initial zoom level of the map. Defaults to 2.\n        height (str, optional): The height of the map. Defaults to \"600px\".\n    \"\"\"\n\n    super().__init__(location=center, zoom_start=zoom, height=height, **kwargs)\n</code></pre>"},{"location":"foliumap/#geospython.foliumap.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenStreetMap')</code>","text":"<p>Add a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>The name of the basemap to add.</p> <code>'OpenStreetMap'</code> Source code in <code>geospython/foliumap.py</code> <pre><code>def add_basemap(self, basemap=\"OpenStreetMap\"):\n    \"\"\"Add a basemap to the map.\n\n    Args:\n        basemap (str): The name of the basemap to add.\n    \"\"\"\n\n    import xyzservices.providers as xyz\n\n    providers = xyz.flatten()\n\n    basemaps = {\n        \"OpenStreetMap\": folium.TileLayer(\"openstreetmap\"),\n        \"CartoDB positron\": folium.TileLayer(\"cartodb positron\"),\n        \"CartoDB dark_matter\": folium.TileLayer(\"cartodb dark_matter\"),\n        \"Esri WorldImagery\": folium.TileLayer(\"esri worldimagery\"),\n        \"OpenTopoMap\": folium.TileLayer(\n            tiles=providers[\"OpenTopoMap\"].build_url(),\n            attr=providers[\"OpenTopoMap\"].attribution,\n            name=providers[\"OpenTopoMap\"].name,\n        ),\n        \"OSM HOT\": folium.TileLayer(\n            tiles=providers[\"OpenStreetMap.HOT\"].build_url(),\n            attr=providers[\"OpenStreetMap.HOT\"].attribution,\n            name=providers[\"OpenStreetMap.HOT\"].name,\n        ),\n        \"Satellite\": folium.TileLayer(\n            tiles=providers[\"Gaode.Satellite\"].build_url(),\n            attr=providers[\"Gaode.Satellite\"].attribution,\n            name=providers[\"Gaode.Satellite\"].name,\n        ),\n        \"Esri WorldStreetMap\": folium.TileLayer(\n            tiles=providers[\"Esri.WorldStreetMap\"].build_url(),\n            attr=providers[\"Esri.WorldStreetMap\"].attribution,\n            name=providers[\"Esri.WorldStreetMap\"].name,\n        ),\n        \"Esri NatGeo\": folium.TileLayer(\n            tiles=providers[\"Esri.NatGeoWorldMap\"].build_url(),\n            attr=providers[\"Esri.NatGeoWorldMap\"].attribution,\n            name=providers[\"Esri.NatGeoWorldMap\"].name,\n        ),\n        \"World At Night\": folium.TileLayer(\n            tiles=providers[\"NASAGIBS.ViirsEarthAtNight2012\"].build_url(),\n            attr=providers[\"NASAGIBS.ViirsEarthAtNight2012\"].attribution,\n            name=providers[\"NASAGIBS.ViirsEarthAtNight2012\"].name,\n        ),\n        \"Strava\": folium.TileLayer(\n            tiles=providers[\"Strava.All\"].build_url(),\n            attr=providers[\"Strava.All\"].attribution,\n            name=providers[\"Strava.All\"].name,\n        ),\n    }\n\n    if basemap in basemaps:\n        basemaps[basemap].add_to(self)\n    else:\n        basemaps[\"OpenStreetMap\"].add_to(self)\n</code></pre>"},{"location":"foliumap/#geospython.foliumap.Map.add_geojson","title":"<code>add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs)</code>","text":"<p>Add GeoJSON data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, dict</code> <p>The GeoJSON data to add.</p> required <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer's bounds. Defaults to True.</p> <code>True</code> <code>hover_style</code> <code>dict</code> <p>The style to apply on hover. Defaults to None.</p> <code>None</code> Source code in <code>geospython/foliumap.py</code> <pre><code>def add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs):\n    \"\"\"Add GeoJSON data to the map.\n\n    Args:\n        data (str, dict): The GeoJSON data to add.\n        zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n        hover_style (dict, optional): The style to apply on hover. Defaults to None.\n    \"\"\"\n\n    import geopandas as gpd\n\n    if isinstance(data, str):\n\n        gdf = gpd.read_file(data)\n        geojson_data = gdf.__geo_interface__\n\n    elif isinstance(data, dict):\n\n        geojson_data = data\n        gdf = gpd.GeoDataFrame.from_features(geojson_data[\"features\"])\n\n    if hover_style is None:\n        hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.5}\n\n    folium.GeoJson(geojson_data, **kwargs).add_to(self)\n\n    # if zoom_to_layer:\n    #     bounds = gdf.total_bounds\n    #     self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n</code></pre>"},{"location":"foliumap/#geospython.foliumap.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Add a layer control to the map.</p> Source code in <code>geospython/foliumap.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"Add a layer control to the map.\"\"\"\n\n    folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"foliumap/#geospython.foliumap.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Add vector data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, dict</code> <p>The vector data to add.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data is not a valid format.</p> Source code in <code>geospython/foliumap.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"Add vector data to the map.\n\n    Args:\n        data (str, dict): The vector data to add.\n\n    Raises:\n        ValueError: If the data is not a valid format.\n    \"\"\"\n\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        layer = gpd.read_file(data)\n        geojson_data = layer.__geo_interface__\n\n        self.add_geojson(geojson_data, **kwargs)\n\n    elif isinstance(data, gpd.GeoDataFrame):\n        geojson_data = data.__geo_interface__\n\n        self.add_geojson(geojson_data, **kwargs)\n    elif isinstance(data, dict):\n        geojson_data = data\n        self.add_geojson(geojson_data, **kwargs)\n    else:\n        raise ValueError(\n            \"Data must be a file path, GeoDataFrame, or GeoJSON dictionary.\"\n        )\n</code></pre>"},{"location":"geospython/","title":"geospython module","text":"<p>Main module. This module provides a Map class for creating and manipulating interactive maps using ipyleaflet. It includes methods for adding various types of layers, such as basemaps, GeoJSON data, vector data, raster data, images, WMS layers, and videos.</p>"},{"location":"geospython/#geospython.geospython.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>geospython/geospython.py</code> <pre><code>class Map(ipyleaflet.Map):\n    def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n        \"\"\"Initialize the map.\n\n        Args:\n            center (list, optional): The initial center of the map. Defaults to [20, 0].\n            zoom (int, optional): The initial zoom level of the map. Defaults to 2.\n            height (str, optional): The height of the map. Defaults to \"600px\".\n            **kwargs: Additional keyword arguments for the ipyleaflet.Map class.\n        \"\"\"\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.layout.height = height\n        self.scroll_wheel_zoom = True\n\n    def add_basemap(self, basemap=\"OpenStreetMap\"):\n        \"\"\"Add a basemap to the map.\n\n        Args:\n            basemap (str): The name of the basemap to add.\n        \"\"\"\n\n        basemaps = {\n            \"OpenStreetMap\": ipyleaflet.basemaps.OpenStreetMap,\n            \"OpenTopoMap\": ipyleaflet.basemaps.OpenTopoMap,\n            \"CartoDB positron\": ipyleaflet.basemaps.CartoDB.Positron,\n            \"CartoDB dark_matter\": ipyleaflet.basemaps.CartoDB.DarkMatter,\n            \"OSM HOT\": ipyleaflet.basemaps.OpenStreetMap.HOT,\n            \"Satellite\": ipyleaflet.basemaps.Gaode.Satellite,\n            \"Esri WorldStreetMap\": ipyleaflet.basemaps.Esri.WorldStreetMap,\n            \"Esri WorldImagery\": ipyleaflet.basemaps.Esri.WorldImagery,\n            \"Esri NatGeo\": ipyleaflet.basemaps.Esri.NatGeoWorldMap,\n            \"World At Night\": ipyleaflet.basemaps.NASAGIBS.ViirsEarthAtNight2012,\n            \"Strava\": ipyleaflet.basemaps.Strava.All,\n        }\n\n        if basemap in basemaps:\n            url = basemaps[basemap].build_url()\n            layer = ipyleaflet.TileLayer(url=url, name=basemap)\n            self.add_layer(layer)\n        else:\n            url = basemaps[\"OpenStreetMap\"].build_url()\n            layer = ipyleaflet.TileLayer(url=url, name=\"OpenStreetMap\")\n            self.add_layer(layer)\n\n    def add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs):\n        \"\"\"Add GeoJSON data to the map.\n\n        Args:\n            data (str, dict): The GeoJSON data to add.\n            zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n            hover_style (dict, optional): The style to apply on hover. Defaults to None.\n            **kwargs: Additional keyword arguments for the ipyleaflet.GeoJSON layer.\n        \"\"\"\n\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            gdf = gpd.read_file(data)\n            geojson_data = gdf.__geo_interface__\n        elif isinstance(data, dict):\n            geojson_data = data\n            gdf = gpd.GeoDataFrame.from_features(geojson_data[\"features\"])\n\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.5}\n\n        geojson_layer = ipyleaflet.GeoJSON(\n            data=geojson_data, hover_style=hover_style, **kwargs\n        )\n        self.add_layer(geojson_layer)\n\n        if zoom_to_layer:\n            bounds = gdf.total_bounds\n            self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n\n    def add_vector(self, data, **kwargs):\n        \"\"\"Add vector data to the map.\n\n        Args:\n            data (str, GeoDataFrame, dict): The vector data to add. Can be a file path, GeoDataFrame, or GeoJSON dictionary.\n            **kwargs: Additional keyword arguments for the add_geojson method.\n\n        Raises:\n            ValueError: If the data is not a valid format.\n        \"\"\"\n\n        import geopandas as gpd\n\n        if isinstance(data, str):\n            layer = gpd.read_file(data)\n            geojson_data = layer.__geo_interface__\n\n            self.add_geojson(geojson_data, **kwargs)\n\n        elif isinstance(data, gpd.GeoDataFrame):\n            geojson_data = data.__geo_interface__\n\n            self.add_geojson(geojson_data, **kwargs)\n        elif isinstance(data, dict):\n            geojson_data = data\n            self.add_geojson(geojson_data, **kwargs)\n        else:\n            raise ValueError(\n                \"Data must be a file path, GeoDataFrame, or GeoJSON dictionary.\"\n            )\n\n    def add_layer_control(self):\n        \"\"\"Add a layer control to the map.\"\"\"\n        control = ipyleaflet.LayersControl(position=\"topright\")\n        self.add_control(control)\n\n    def add_raster(\n        self, filepath, name=None, colormap=\"viridis\", opacity=1.0, **kwargs\n    ):\n        \"\"\"Add a raster layer to the map.\n\n        Args:\n            filepath (str): The file path to the raster data.\n            name (str, optional): The name of the layer. Defaults to None.\n            colormap (str, optional): The colormap to use. Defaults to \"viridis\".\n            opacity (float, optional): The opacity of the layer. Defaults to 1.0\n            **kwargs: Additional keyword arguments for the tile layer.\n        \"\"\"\n\n        from localtileserver import TileClient, get_leaflet_tile_layer\n\n        if name is None:\n            name = \"Tile Layer\"\n\n        client = TileClient(filepath)\n        tile_layer = get_leaflet_tile_layer(\n            client, name=name, colormap=colormap, opacity=opacity, **kwargs\n        )\n        self.add(tile_layer)\n        self.center = client.center()\n        self.zoom = client.default_zoom\n\n    def add_image(self, image, bounds=None, opacity=1.0, **kwargs):\n        \"\"\"Adds an image to the map.\n\n        Args:\n            image (str): The file path to the image.\n            bounds (list, optional): The bounds for the image. Defaults to None.\n            opacity (float, optional): The opacity of the image. Defaults to 1.0.\n            **kwargs: Additional keyword arguments for the ipyleaflet.ImageOverlay layer.\n        \"\"\"\n\n        if bounds is None:\n            bounds = [[-90, -180], [90, 180]]\n\n        overlay = ipyleaflet.ImageOverlay(\n            url=image, bounds=bounds, opacity=opacity, **kwargs\n        )\n        self.add(overlay)\n\n    def add_wms_layer(\n        self, url, layers, format=\"image/png\", transparent=True, **kwargs\n    ):\n        \"\"\"Adds a WMS layer to the map.\n\n        Args:\n            url (str): The WMS service URL.\n            layers (str): The layers to display.\n            format (str, optional): The image format. Defaults to \"image/png\".\n            transparent (bool, optional): Whether the layer is transparent. Defaults to True.\n            **kwargs: Additional keyword arguments for the ipyleaflet.WMSLayer layer.\n        \"\"\"\n        layer = ipyleaflet.WMSLayer(\n            url=url, layers=layers, format=format, transparent=transparent, **kwargs\n        )\n        self.add(layer)\n\n    def add_video(self, video, bounds=None, opacity=1.0, **kwargs):\n        \"\"\"Adds a video to the map.\n\n        Args:\n            video (str): The file path to the video.\n            bounds (list, optional): The bounds for the video. Defaults to None.\n            opacity (float, optional): The opacity of the video. Defaults to 1.0.\n            **kwargs: Additional keyword arguments for the ipyleaflet.VideoOverlay layer.\n        \"\"\"\n\n        if bounds is None:\n            bounds = [[-90, -180], [90, 180]]\n        overlay = ipyleaflet.VideoOverlay(\n            url=video, bounds=bounds, opacity=opacity, **kwargs\n        )\n        self.add(overlay)\n</code></pre>"},{"location":"geospython/#geospython.geospython.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, height='600px', **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>The initial center of the map. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>The initial zoom level of the map. Defaults to 2.</p> <code>2</code> <code>height</code> <code>str</code> <p>The height of the map. Defaults to \"600px\".</p> <code>'600px'</code> <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.Map class.</p> <code>{}</code> Source code in <code>geospython/geospython.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, height=\"600px\", **kwargs):\n    \"\"\"Initialize the map.\n\n    Args:\n        center (list, optional): The initial center of the map. Defaults to [20, 0].\n        zoom (int, optional): The initial zoom level of the map. Defaults to 2.\n        height (str, optional): The height of the map. Defaults to \"600px\".\n        **kwargs: Additional keyword arguments for the ipyleaflet.Map class.\n    \"\"\"\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    self.layout.height = height\n    self.scroll_wheel_zoom = True\n</code></pre>"},{"location":"geospython/#geospython.geospython.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenStreetMap')</code>","text":"<p>Add a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>The name of the basemap to add.</p> <code>'OpenStreetMap'</code> Source code in <code>geospython/geospython.py</code> <pre><code>def add_basemap(self, basemap=\"OpenStreetMap\"):\n    \"\"\"Add a basemap to the map.\n\n    Args:\n        basemap (str): The name of the basemap to add.\n    \"\"\"\n\n    basemaps = {\n        \"OpenStreetMap\": ipyleaflet.basemaps.OpenStreetMap,\n        \"OpenTopoMap\": ipyleaflet.basemaps.OpenTopoMap,\n        \"CartoDB positron\": ipyleaflet.basemaps.CartoDB.Positron,\n        \"CartoDB dark_matter\": ipyleaflet.basemaps.CartoDB.DarkMatter,\n        \"OSM HOT\": ipyleaflet.basemaps.OpenStreetMap.HOT,\n        \"Satellite\": ipyleaflet.basemaps.Gaode.Satellite,\n        \"Esri WorldStreetMap\": ipyleaflet.basemaps.Esri.WorldStreetMap,\n        \"Esri WorldImagery\": ipyleaflet.basemaps.Esri.WorldImagery,\n        \"Esri NatGeo\": ipyleaflet.basemaps.Esri.NatGeoWorldMap,\n        \"World At Night\": ipyleaflet.basemaps.NASAGIBS.ViirsEarthAtNight2012,\n        \"Strava\": ipyleaflet.basemaps.Strava.All,\n    }\n\n    if basemap in basemaps:\n        url = basemaps[basemap].build_url()\n        layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add_layer(layer)\n    else:\n        url = basemaps[\"OpenStreetMap\"].build_url()\n        layer = ipyleaflet.TileLayer(url=url, name=\"OpenStreetMap\")\n        self.add_layer(layer)\n</code></pre>"},{"location":"geospython/#geospython.geospython.Map.add_geojson","title":"<code>add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs)</code>","text":"<p>Add GeoJSON data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, dict</code> <p>The GeoJSON data to add.</p> required <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer's bounds. Defaults to True.</p> <code>True</code> <code>hover_style</code> <code>dict</code> <p>The style to apply on hover. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.GeoJSON layer.</p> <code>{}</code> Source code in <code>geospython/geospython.py</code> <pre><code>def add_geojson(self, data, zoom_to_layer=True, hover_style=None, **kwargs):\n    \"\"\"Add GeoJSON data to the map.\n\n    Args:\n        data (str, dict): The GeoJSON data to add.\n        zoom_to_layer (bool, optional): Whether to zoom to the layer's bounds. Defaults to True.\n        hover_style (dict, optional): The style to apply on hover. Defaults to None.\n        **kwargs: Additional keyword arguments for the ipyleaflet.GeoJSON layer.\n    \"\"\"\n\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        gdf = gpd.read_file(data)\n        geojson_data = gdf.__geo_interface__\n    elif isinstance(data, dict):\n        geojson_data = data\n        gdf = gpd.GeoDataFrame.from_features(geojson_data[\"features\"])\n\n    if hover_style is None:\n        hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.5}\n\n    geojson_layer = ipyleaflet.GeoJSON(\n        data=geojson_data, hover_style=hover_style, **kwargs\n    )\n    self.add_layer(geojson_layer)\n\n    if zoom_to_layer:\n        bounds = gdf.total_bounds\n        self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n</code></pre>"},{"location":"geospython/#geospython.geospython.Map.add_image","title":"<code>add_image(self, image, bounds=None, opacity=1.0, **kwargs)</code>","text":"<p>Adds an image to the map.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>str</code> <p>The file path to the image.</p> required <code>bounds</code> <code>list</code> <p>The bounds for the image. Defaults to None.</p> <code>None</code> <code>opacity</code> <code>float</code> <p>The opacity of the image. Defaults to 1.0.</p> <code>1.0</code> <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.ImageOverlay layer.</p> <code>{}</code> Source code in <code>geospython/geospython.py</code> <pre><code>def add_image(self, image, bounds=None, opacity=1.0, **kwargs):\n    \"\"\"Adds an image to the map.\n\n    Args:\n        image (str): The file path to the image.\n        bounds (list, optional): The bounds for the image. Defaults to None.\n        opacity (float, optional): The opacity of the image. Defaults to 1.0.\n        **kwargs: Additional keyword arguments for the ipyleaflet.ImageOverlay layer.\n    \"\"\"\n\n    if bounds is None:\n        bounds = [[-90, -180], [90, 180]]\n\n    overlay = ipyleaflet.ImageOverlay(\n        url=image, bounds=bounds, opacity=opacity, **kwargs\n    )\n    self.add(overlay)\n</code></pre>"},{"location":"geospython/#geospython.geospython.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Add a layer control to the map.</p> Source code in <code>geospython/geospython.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"Add a layer control to the map.\"\"\"\n    control = ipyleaflet.LayersControl(position=\"topright\")\n    self.add_control(control)\n</code></pre>"},{"location":"geospython/#geospython.geospython.Map.add_raster","title":"<code>add_raster(self, filepath, name=None, colormap='viridis', opacity=1.0, **kwargs)</code>","text":"<p>Add a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The file path to the raster data.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to None.</p> <code>None</code> <code>colormap</code> <code>str</code> <p>The colormap to use. Defaults to \"viridis\".</p> <code>'viridis'</code> <code>opacity</code> <code>float</code> <p>The opacity of the layer. Defaults to 1.0</p> <code>1.0</code> <code>**kwargs</code> <p>Additional keyword arguments for the tile layer.</p> <code>{}</code> Source code in <code>geospython/geospython.py</code> <pre><code>def add_raster(\n    self, filepath, name=None, colormap=\"viridis\", opacity=1.0, **kwargs\n):\n    \"\"\"Add a raster layer to the map.\n\n    Args:\n        filepath (str): The file path to the raster data.\n        name (str, optional): The name of the layer. Defaults to None.\n        colormap (str, optional): The colormap to use. Defaults to \"viridis\".\n        opacity (float, optional): The opacity of the layer. Defaults to 1.0\n        **kwargs: Additional keyword arguments for the tile layer.\n    \"\"\"\n\n    from localtileserver import TileClient, get_leaflet_tile_layer\n\n    if name is None:\n        name = \"Tile Layer\"\n\n    client = TileClient(filepath)\n    tile_layer = get_leaflet_tile_layer(\n        client, name=name, colormap=colormap, opacity=opacity, **kwargs\n    )\n    self.add(tile_layer)\n    self.center = client.center()\n    self.zoom = client.default_zoom\n</code></pre>"},{"location":"geospython/#geospython.geospython.Map.add_vector","title":"<code>add_vector(self, data, **kwargs)</code>","text":"<p>Add vector data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, GeoDataFrame, dict</code> <p>The vector data to add. Can be a file path, GeoDataFrame, or GeoJSON dictionary.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the add_geojson method.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the data is not a valid format.</p> Source code in <code>geospython/geospython.py</code> <pre><code>def add_vector(self, data, **kwargs):\n    \"\"\"Add vector data to the map.\n\n    Args:\n        data (str, GeoDataFrame, dict): The vector data to add. Can be a file path, GeoDataFrame, or GeoJSON dictionary.\n        **kwargs: Additional keyword arguments for the add_geojson method.\n\n    Raises:\n        ValueError: If the data is not a valid format.\n    \"\"\"\n\n    import geopandas as gpd\n\n    if isinstance(data, str):\n        layer = gpd.read_file(data)\n        geojson_data = layer.__geo_interface__\n\n        self.add_geojson(geojson_data, **kwargs)\n\n    elif isinstance(data, gpd.GeoDataFrame):\n        geojson_data = data.__geo_interface__\n\n        self.add_geojson(geojson_data, **kwargs)\n    elif isinstance(data, dict):\n        geojson_data = data\n        self.add_geojson(geojson_data, **kwargs)\n    else:\n        raise ValueError(\n            \"Data must be a file path, GeoDataFrame, or GeoJSON dictionary.\"\n        )\n</code></pre>"},{"location":"geospython/#geospython.geospython.Map.add_video","title":"<code>add_video(self, video, bounds=None, opacity=1.0, **kwargs)</code>","text":"<p>Adds a video to the map.</p> <p>Parameters:</p> Name Type Description Default <code>video</code> <code>str</code> <p>The file path to the video.</p> required <code>bounds</code> <code>list</code> <p>The bounds for the video. Defaults to None.</p> <code>None</code> <code>opacity</code> <code>float</code> <p>The opacity of the video. Defaults to 1.0.</p> <code>1.0</code> <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.VideoOverlay layer.</p> <code>{}</code> Source code in <code>geospython/geospython.py</code> <pre><code>def add_video(self, video, bounds=None, opacity=1.0, **kwargs):\n    \"\"\"Adds a video to the map.\n\n    Args:\n        video (str): The file path to the video.\n        bounds (list, optional): The bounds for the video. Defaults to None.\n        opacity (float, optional): The opacity of the video. Defaults to 1.0.\n        **kwargs: Additional keyword arguments for the ipyleaflet.VideoOverlay layer.\n    \"\"\"\n\n    if bounds is None:\n        bounds = [[-90, -180], [90, 180]]\n    overlay = ipyleaflet.VideoOverlay(\n        url=video, bounds=bounds, opacity=opacity, **kwargs\n    )\n    self.add(overlay)\n</code></pre>"},{"location":"geospython/#geospython.geospython.Map.add_wms_layer","title":"<code>add_wms_layer(self, url, layers, format='image/png', transparent=True, **kwargs)</code>","text":"<p>Adds a WMS layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The WMS service URL.</p> required <code>layers</code> <code>str</code> <p>The layers to display.</p> required <code>format</code> <code>str</code> <p>The image format. Defaults to \"image/png\".</p> <code>'image/png'</code> <code>transparent</code> <code>bool</code> <p>Whether the layer is transparent. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments for the ipyleaflet.WMSLayer layer.</p> <code>{}</code> Source code in <code>geospython/geospython.py</code> <pre><code>def add_wms_layer(\n    self, url, layers, format=\"image/png\", transparent=True, **kwargs\n):\n    \"\"\"Adds a WMS layer to the map.\n\n    Args:\n        url (str): The WMS service URL.\n        layers (str): The layers to display.\n        format (str, optional): The image format. Defaults to \"image/png\".\n        transparent (bool, optional): Whether the layer is transparent. Defaults to True.\n        **kwargs: Additional keyword arguments for the ipyleaflet.WMSLayer layer.\n    \"\"\"\n    layer = ipyleaflet.WMSLayer(\n        url=url, layers=layers, format=format, transparent=transparent, **kwargs\n    )\n    self.add(layer)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install geospython, run this command in your terminal:</p> <pre><code>pip install geospython\n</code></pre> <p>This is the preferred method to install geospython, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install geospython from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/HammamiKhaled/geospython\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use geospython in a project:</p> <pre><code>import geospython\n</code></pre>"},{"location":"examples/foliumap/","title":"Foliumap","text":"In\u00a0[1]: Copied! <pre>import geospython.foliumap as geospython\n</pre> import geospython.foliumap as geospython In\u00a0[2]: Copied! <pre>m = geospython.Map()\nm\n</pre> m = geospython.Map() m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[3]: Copied! <pre>m.add_basemap(\"OpenTopoMap\")\nm\n</pre> m.add_basemap(\"OpenTopoMap\") m Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[4]: Copied! <pre>m.add_basemap(\"Esri NatGeo\")\nm\n</pre> m.add_basemap(\"Esri NatGeo\") m Out[4]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[5]: Copied! <pre>m.add_basemap(\"Strava\")\nm\n</pre> m.add_basemap(\"Strava\") m Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[6]: Copied! <pre>m.add_basemap(\"Satellite\")\nm\n</pre> m.add_basemap(\"Satellite\") m Out[6]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[7]: Copied! <pre>m.add_basemap(\"World At Night\")\nm\n</pre> m.add_basemap(\"World At Night\") m Out[7]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[8]: Copied! <pre>m.add_vector(\n    data=\"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\",\n    name=\"Countries\",\n)\nm\n</pre> m.add_vector(     data=\"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\",     name=\"Countries\", ) m Out[8]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[9]: Copied! <pre>m.add_layer_control()\nm\n</pre> m.add_layer_control() m Out[9]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/foliumap/#interactive-map-using-foliumap-module","title":"Interactive Map Using Foliumap Module\u00b6","text":""},{"location":"examples/foliumap/#creating-an-interactive-map","title":"Creating an interactive map\u00b6","text":""},{"location":"examples/foliumap/#basemap-examples","title":"Basemap examples\u00b6","text":""},{"location":"examples/foliumap/#adding-a-vector-layer","title":"Adding a vector Layer\u00b6","text":""},{"location":"examples/foliumap/#adding-layer-control","title":"Adding Layer Control\u00b6","text":""},{"location":"examples/geospython/","title":"Geospython","text":"In\u00a0[1]: Copied! <pre>import geospython as geospython\n</pre> import geospython as geospython In\u00a0[2]: Copied! <pre>m = geospython.Map()\nm\n</pre> m = geospython.Map() m Out[2]: In\u00a0[3]: Copied! <pre>m1 = geospython.Map()\nm1.add_basemap(\"OpenTopoMap\")\nm1\n</pre> m1 = geospython.Map() m1.add_basemap(\"OpenTopoMap\") m1 Out[3]: In\u00a0[4]: Copied! <pre>m2 = geospython.Map()\nm2.add_basemap(\"Esri WorldImagery\")\nm2\n</pre> m2 = geospython.Map() m2.add_basemap(\"Esri WorldImagery\") m2 Out[4]: In\u00a0[5]: Copied! <pre>m3 = geospython.Map()\nm3.add_basemap(\"World At Night\")\nm3\n</pre> m3 = geospython.Map() m3.add_basemap(\"World At Night\") m3 Out[5]: In\u00a0[6]: Copied! <pre>m1.add_vector(\n    data=\"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\",\n    name=\"Countries\",\n)\nm1\n</pre> m1.add_vector(     data=\"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\",     name=\"Countries\", ) m1 Out[6]: In\u00a0[7]: Copied! <pre>m1.add_layer_control()\nm1\n</pre> m1.add_layer_control() m1 Out[7]: In\u00a0[8]: Copied! <pre>m2.add_raster(\n    \"https://github.com/opengeos/datasets/releases/download/raster/landsat.tif\"\n)\n</pre> m2.add_raster(     \"https://github.com/opengeos/datasets/releases/download/raster/landsat.tif\" ) In\u00a0[9]: Copied! <pre>m3.add_wms_layer(\n    \"https://gibs.earthdata.nasa.gov/wms/epsg4326/best/wms.cgi\",\n    \"MODIS_Terra_CorrectedReflectance_TrueColor\",\n    format=\"image/png\",\n    transparent=True,\n)\n</pre> m3.add_wms_layer(     \"https://gibs.earthdata.nasa.gov/wms/epsg4326/best/wms.cgi\",     \"MODIS_Terra_CorrectedReflectance_TrueColor\",     format=\"image/png\",     transparent=True, ) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/geospython/#interactive-map-using-geospython-module","title":"Interactive Map Using Geospython Module\u00b6","text":""},{"location":"examples/geospython/#creating-an-interactive-map","title":"Creating an interactive map\u00b6","text":""},{"location":"examples/geospython/#basemap-examples","title":"Basemap examples\u00b6","text":""},{"location":"examples/geospython/#adding-a-vector-layer","title":"Adding a vector layer\u00b6","text":""},{"location":"examples/geospython/#adding-a-layer-control","title":"Adding a layer Control\u00b6","text":""},{"location":"examples/geospython/#add-raster","title":"Add Raster\u00b6","text":""},{"location":"examples/geospython/#adding-wms-layer","title":"Adding WMS layer\u00b6","text":""},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print(\"Hello World!\")\n</pre> print(\"Hello World!\") <pre>Hello World!\n</pre>"},{"location":"examples/map/","title":"Map","text":"In\u00a0[1]: Copied! <pre>import geospython as geospython\n</pre> import geospython as geospython In\u00a0[2]: Copied! <pre>m = geospython.Map()\nm\n</pre> m = geospython.Map() m Out[2]:"},{"location":"examples/map/#interactive-map","title":"Interactive Map\u00b6","text":""}]}